const express = require("express");
const fs = require("fs");
const configs = JSON.parse(fs.readFileSync("local-configs.json"));
const router = express.Router();
const axios = require("axios");
const querystring = require("qs");
const oDataservice = configs['manufacturing-execution-service'];

const addIntRoutes = async () => {
    if(!oDataservice){
      return;
    }
    let oAuth = configs.auths['papiAuth'];
    let oauthToken="";

    if(oAuth){
      let tokenResponse = await axios
    .post(oAuth.authUrl,null,
      {
        params: {
          grant_type: "client_credentials",
          client_id: oAuth.clientId,
          client_secret: oAuth.clientSecret,
        },
      }
    )
  
     oauthToken = tokenResponse.data.access_token;
    }
    

  router.get("/oData/:servicePath*", (req, res) => {
    const targetPath = extractEndpoint(req.params[0]);

    console.log(targetPath);
    let service = extractService(targetPath);
    let url = oDataservice.replace("#service#", service) + targetPath;
    const host = oDataservice
      .replace("#service#", service)
      .replace("https://", "");

    const serializedParams = querystring.stringify(req.query, {
      encode: false,
    });
    url += "?" + serializedParams;
    console.log(url);

    axios
      .get(url, {
        headers: {
          ...req.headers,
          Accept: req.headers.accept || "application/json",
          host: host,
          Authorization: "Bearer " + oauthToken,
        },
      })
      .then((response) => {
        res.send(response.data);
      })
      .catch((error) => {
        if (error.response) {
          console.error("Error:", error.response.data);
          res.status(error.response.status).json(error.response.data);
        } else {
          console.error("Request Error:", error.message);
          res.status(500).send("Internal Server Error:" + error);
        }
      });
  });

  router.post("/oData/:servicePath*", (req, res) => {
    const targetPath = extractEndpoint(req.params[0]);

    console.log(targetPath);
    let service = extractService(targetPath);
    const url = oDataservice.replace("#service#", service) + targetPath;
    const host = oDataservice
      .replace("#service#", service)
      .replace("https://", "");

    console.log(url, req.query);
    axios
      .post(url, req.body, {
        params: req.query,
        headers: {
          ...req.headers,
          Accept: req.headers.accept || "application/json",
          host: host,
          Authorization: "Bearer " + oauthToken
        },
      })
      .then((response) => {
        res.send(response.data);
      })
      .catch((error) => {
        if (error.response) {
          console.error("Error:", error.response.data);
          res.status(error.response.status).json(error.response.data);
        } else {
          console.error("Request Error:", error.message);
          res.status(500).send("Internal Server Error:" + error);
        }
      });
  });

  /*************** Micro services ***********/
  router.get("/ms/:servicePath*", (req, res) => {
    let tempPath = extractEndpoint(req.params[0]);
    let targetPath = "/" + tempPath.split("/").slice(2).join("/");

    console.log(targetPath);
    let service = extractmsService(tempPath);
    const url = oDataservice.replace("#service#", service) + targetPath;
    const host = oDataservice
      .replace("#service#", service)
      .replace("#service#", service);

    let headers = {
      "x-dme-plant": req.headers["x-dme-plant"],
      host: host,
      "content-type": req.headers["content-type"],
      Authorization: "Bearer " + oauthToken
      
    };
    console.log(url, req.query, headers);
    axios
      .get(url, req.body, {
        params: req.query,
        headers: headers,
      })
      .then((response) => {
        res.send(response.data);
      })
      .catch((error) => {
        if (error.response) {
          console.error("Error:", error.response.data);
          res.status(error.response.status).json(error.response.data);
        } else {
          console.error("Request Error:", error.message);
          res.status(500).send("Internal Server Error:" + error);
        }
      });
  });

  function extractEndpoint(url) {
    let urlArray = url.split("/");
    let index;
    urlArray.forEach((element, i) => {
      if (element.indexOf(".svc") > 0) {
        index = i;
        return;
      }
    });

    urlArray.splice(0, index);
    return "/" + urlArray.join("/");
  }

  function extractService(input) {
    const regex = /([^\/]+)\.svc/;
    const match = input.match(regex);
    let service;

    if (match && match.length > 1) {
      service = match[1];
    }

    return service;
  }

  function extractmsService(input) {
    const regex = /([^\/]+)\-ms/;
    const match = input.match(regex);
    let service;

    if (match && match.length > 1) {
      service = match[1];
    }

    return service;
  }
  return router
};

module.exports = addIntRoutes;

