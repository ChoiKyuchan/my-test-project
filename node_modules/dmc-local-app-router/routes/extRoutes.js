const express = require('express')
const fs = require('fs')
const configs = JSON.parse(fs.readFileSync('local-configs.json'));
const router = express.Router()
const axios = require("axios");
const querystring = require('qs');

const addExtRoutes = async ()=>{
    if(configs.routes){
        for(let oRoute of configs.routes){
            let targetServerUrl = oRoute.uri;
            let oAuth = configs.auths[oRoute.auth];
            let oauthToken="";
            
            if(oAuth){
              let tokenResponse = await axios
              .post(oAuth.authUrl,null,
                {
                  params: {
                    grant_type: "client_credentials",
                    client_id: oAuth.clientId,
                    client_secret: oAuth.clientSecret,
                  },
                }
              );

              oauthToken = tokenResponse.data.access_token;
            }
            
            router.get(oRoute.route, (req, res) => {
                const targetPath = req.params.servicePath + (req.params[0] || "");
                let url = targetServerUrl + "/" + targetPath;
            
                const serializedParams = querystring.stringify(req.query, { encode: true });
                url += "?" + serializedParams
                console.log(url);
            
                axios.get(url, {
                  headers: {
                    Accept: "application/json",
                    Authorization:"Bearer "+oauthToken,
                  },
                })
                  .then((response) => {
                    res.send(response.data);
                  })
                  .catch((error) => {
                    if (error.response) {
                      console.error("Error:", error.response.data);
                      res.status(error.response.status).json(error.response.data);
                    } else {
                      console.error("Request Error:", error.message);
                      res.status(500).send("Internal Server Error:" + error);
                    }
                  });
            });
            
            router.post(oRoute.route, async (req, res) => {
                try {
            
                  const targetPath = req.params.servicePath + (req.params[0] || "");
                  const url = new URL(targetPath, targetServerUrl);
            
                  console.log(url.toString(), req.body);
            
                  const response = await axios.post(url.toString(), req.body, {
                    params: req.query,
                    headers: {
                      Accept: "application/json",
                      "Content-Type": "application/json",
                      Authorization:"Bearer "+oauthToken
                    },
                  });
            
                  res.status(response.status).json(response.data);
                } catch (error) {
                  console.error("Request Error:", error.message);
            
                  if (error.response) {
                    console.error("Error:", error.response.data);
                    res.status(error.response.status).json(error.response.data);
                  } else {
                    res.status(500).json({ error: "Internal Server Error" });
                  }
                }
              });
            
            router.put(oRoute.route, async (req, res) => {
                try {
            
                  const targetPath = req.params.servicePath + (req.params[0] || "");
                  const url = new URL(targetPath, targetServerUrl);
            
                  console.log(url.toString(), req.body);
            
                  const response = await axios.put(url.toString(), req.body, {
                    params: req.query,
                    headers: {
                    Authorization:"Bearer "+oauthToken,
                      Accept: "application/json",
                      "Content-Type": "application/json", // Specify the content type
                    },
                  });
            
                  res.status(response.status).json(response.data);
                } catch (error) {
                  console.error("Request Error:", error.message);
            
                  if (error.response) {
                    console.error("Error:", error.response.data);
                    res.status(error.response.status).json(error.response.data);
                  } else {
                    res.status(500).json({ error: "Internal Server Error" });
                  }
                }
              });
            
            router.patch(oRoute.route, async (req, res) => {
                try {
            
                  const targetPath = req.params.servicePath + (req.params[0] || "");
                  const url = new URL(targetPath, targetServerUrl);
            
                  console.log(url.toString(), req.body);
            
                  const response = await axios.patch(url.toString(), req.body, {
                    params: req.query,
                    headers: {
                      Authorization:"Bearer "+oauthToken,
                      Accept: "application/json",
                      "Content-Type": "application/json",
                    },
                  });
            
                  res.status(response.status).json(response.data);
                } catch (error) {
                  console.error("Request Error:", error.message);
            
                  if (error.response) {
                    console.error("Error:", error.response.data);
                    res.status(error.response.status).json(error.response.data);
                  } else {
                    res.status(500).json({ error: "Internal Server Error" });
                  }
                }
            });
    
            router.delete(oRoute.route, async (req, res) => {
              try {
                const targetPath = req.params.servicePath + (req.params[0] || "");
                const url = new URL(targetPath, targetServerUrl);
            
                console.log(url.toString(), req.body);

                if(req.body && Object.keys(req.body)>0){
                  const response = await axios.delete(url.toString(), reqBody,{
                    params:req.query,
                    headers: {
                      Authorization:"Bearer "+oauthToken,
                      Accept: "application/json",
                      "Content-Type": "application/json", 
                    },
                  });
                  return res.status(response.status).json(response.data);
                }else{
                  const response = await axios.delete(url.toString(),{
                    params:req.query,
                    headers: {
                      Authorization:"Bearer "+oauthToken,
                      Accept: "application/json",
                      "Content-Type": "application/json", 
                    },
                  });
                  return res.status(response.status).json(response.data);
                }
                
                
              } catch (error) {
                console.error("Request Error:", error.message);
                
                if (error.response) {
                  console.error("Error:", error.response.data);
                  res.status(error.response.status).json(error.response.data);
                } else {
                  res.status(500).json({ error: "Internal Server Error" });
                }
              }
          });
        }
       
    }

    return router
}

module.exports = addExtRoutes;